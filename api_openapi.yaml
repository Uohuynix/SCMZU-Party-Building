openapi: 3.0.3
info:
  title: 党校管理系统 API
  description: 基于Go语言和Gin框架开发的党校管理系统API接口文档
  version: 2.0.0
  contact:
    name: 新思路实验室Geek组2023级全体
  license:
    name: MIT

servers:
  - url: http://localhost:8080
    description: 本地开发服务器

security:
  - BearerAuth: []

paths:
  # 健康检查
  /health:
    get:
      tags:
        - 系统状态
      summary: 健康检查
      description: 检查系统运行状态
      security: []
      responses:
        '200':
          description: 系统正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "Party Building Management System is running"

  # 认证接口
  /api/v1/auth/login:
    post:
      tags:
        - 认证管理
      summary: 用户登录
      description: 用户登录获取JWT Token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "password"
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 认证失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/register:
    post:
      tags:
        - 认证管理
      summary: 用户注册
      description: 注册新用户
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
              properties:
                username:
                  type: string
                  example: "newuser"
                password:
                  type: string
                  example: "password123"
                name:
                  type: string
                  example: "新用户"
                role:
                  type: string
                  enum: [admin, teacher, student]
                  default: student
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    $ref: '#/components/schemas/User'

  /api/v1/profile:
    get:
      tags:
        - 认证管理
      summary: 获取用户信息
      description: 获取当前登录用户信息
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  # 学员管理接口
  /api/v1/students:
    get:
      tags:
        - 学员管理
      summary: 获取学员列表
      description: 分页获取学员列表
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 每页数量
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  total:
                    type: integer
                    example: 100
                  page:
                    type: integer
                    example: 1

    post:
      tags:
        - 学员管理
      summary: 创建学员
      description: 创建新学员
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

  /api/v1/students/{id}:
    get:
      tags:
        - 学员管理
      summary: 获取学员详情
      description: 根据ID获取学员详细信息
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: 学员不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 学员管理
      summary: 更新学员信息
      description: 更新学员信息
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

    delete:
      tags:
        - 学员管理
      summary: 删除学员
      description: 删除学员
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student deleted successfully"

  # 发展历程接口
  /api/v1/students/{id}/development:
    get:
      tags:
        - 发展历程
      summary: 获取学员发展历程
      description: 获取学员的党员发展历程
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Development'

    put:
      tags:
        - 发展历程
      summary: 更新学员发展历程
      description: 更新学员的党员发展历程
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDevelopmentRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Development'

  # 奖惩记录接口
  /api/v1/students/{id}/rewards:
    get:
      tags:
        - 奖惩记录
      summary: 获取学员奖惩记录
      description: 获取学员的奖励和处分记录
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reward'

    post:
      tags:
        - 奖惩记录
      summary: 创建奖惩记录
      description: 为学员创建新的奖惩记录
      parameters:
        - name: id
          in: path
          required: true
          description: 学员ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRewardRequest'
      responses:
        '201':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reward'

  # 培训管理接口
  /api/v1/trainings:
    get:
      tags:
        - 培训管理
      summary: 获取培训列表
      description: 分页获取培训记录列表
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 每页数量
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Training'
                  total:
                    type: integer
                    example: 100
                  page:
                    type: integer
                    example: 1

    post:
      tags:
        - 培训管理
      summary: 创建培训记录
      description: 创建新的培训记录
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrainingRequest'
      responses:
        '201':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'

  /api/v1/trainings/{id}:
    get:
      tags:
        - 培训管理
      summary: 获取培训详情
      description: 根据ID获取培训记录详情
      parameters:
        - name: id
          in: path
          required: true
          description: 培训记录ID
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        '404':
          description: 培训记录不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 培训管理
      summary: 更新培训记录
      description: 更新培训记录信息
      parameters:
        - name: id
          in: path
          required: true
          description: 培训记录ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrainingRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'

    delete:
      tags:
        - 培训管理
      summary: 删除培训记录
      description: 删除培训记录
      parameters:
        - name: id
          in: path
          required: true
          description: 培训记录ID
          schema:
            type: integer
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Training deleted successfully"

  # 统计分析接口
  /api/v1/statistics/trainings:
    get:
      tags:
        - 统计分析
      summary: 获取培训统计
      description: 获取培训成绩统计数据
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingStats'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 用户模型
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "admin"
        name:
          type: string
          example: "管理员"
        role:
          type: string
          enum: [admin, teacher, student]
          example: "admin"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # 学员模型
    Student:
      type: object
      properties:
        id:
          type: integer
          example: 1
        student_no:
          type: string
          example: "2021001"
        name:
          type: string
          example: "张三"
        gender:
          type: string
          enum: [male, female]
          example: "male"
        ethnicity:
          type: string
          example: "汉族"
        birth_date:
          type: string
          format: date-time
        education:
          type: string
          example: "本科"
        phone:
          type: string
          example: "13800138001"
        id_card:
          type: string
          example: "110101200001011234"
        major_class:
          type: string
          example: "计算机科学与技术"
        type:
          type: string
          enum: [masses, activist, candidate, probationary, formal]
          example: "masses"
        admission_date:
          type: string
          format: date-time
        conversion_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # 创建学员请求
    CreateStudentRequest:
      type: object
      required:
        - student_no
        - name
        - gender
        - type
      properties:
        student_no:
          type: string
          example: "2024001"
        name:
          type: string
          example: "李四"
        gender:
          type: string
          enum: [male, female]
          example: "female"
        ethnicity:
          type: string
          example: "汉族"
        birth_date:
          type: string
          format: date-time
        education:
          type: string
          example: "本科"
        phone:
          type: string
          example: "13800138002"
        id_card:
          type: string
          example: "110101200005151234"
        major_class:
          type: string
          example: "软件工程"
        type:
          type: string
          enum: [masses, activist, candidate, probationary, formal]
          example: "masses"
        admission_date:
          type: string
          format: date-time

    # 更新学员请求
    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
          example: "李四（更新）"
        gender:
          type: string
          enum: [male, female]
          example: "female"
        type:
          type: string
          enum: [masses, activist, candidate, probationary, formal]
          example: "activist"
        phone:
          type: string
          example: "13800138999"

    # 发展历程模型
    Development:
      type: object
      properties:
        id:
          type: integer
          example: 1
        student_id:
          type: integer
          example: 1
        apply_date:
          type: string
          format: date-time
        activist_date:
          type: string
          format: date-time
        candidate_date:
          type: string
          format: date-time
        probation_date:
          type: string
          format: date-time
        conversion_date:
          type: string
          format: date-time
        transfer_date:
          type: string
          format: date-time
        introduction_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [masses, activist, candidate, probationary, formal]
          example: "masses"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/Student'

    # 更新发展历程请求
    UpdateDevelopmentRequest:
      type: object
      properties:
        apply_date:
          type: string
          format: date-time
        activist_date:
          type: string
          format: date-time
        candidate_date:
          type: string
          format: date-time
        probation_date:
          type: string
          format: date-time
        conversion_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [masses, activist, candidate, probationary, formal]
          example: "formal"

    # 奖惩记录模型
    Reward:
      type: object
      properties:
        id:
          type: integer
          example: 1
        student_id:
          type: integer
          example: 1
        type:
          type: string
          enum: [reward, punishment]
          example: "reward"
        content:
          type: string
          example: "优秀学生干部"
        date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/Student'

    # 创建奖惩记录请求
    CreateRewardRequest:
      type: object
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum: [reward, punishment]
          example: "reward"
        content:
          type: string
          example: "三好学生"
        date:
          type: string
          format: date-time

    # 培训模型
    Training:
      type: object
      properties:
        id:
          type: integer
          example: 1
        period:
          type: string
          example: "2021年春季"
        student_id:
          type: integer
          example: 1
        unit:
          type: string
          example: "马克思主义学院"
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        score:
          type: string
          enum: [excellent, good, pass, fail]
          example: "excellent"
        certificate_no:
          type: string
          example: "CERT2021001"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/Student'

    # 创建培训请求
    CreateTrainingRequest:
      type: object
      required:
        - period
        - student_id
        - unit
      properties:
        period:
          type: string
          example: "2024年春季"
        student_id:
          type: integer
          example: 1
        unit:
          type: string
          example: "党校"
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        score:
          type: string
          enum: [excellent, good, pass, fail]
          example: "excellent"
        certificate_no:
          type: string
          example: "CERT2024001"

    # 更新培训请求
    UpdateTrainingRequest:
      type: object
      properties:
        period:
          type: string
          example: "2024年春季（更新）"
        unit:
          type: string
          example: "党校（更新）"
        score:
          type: string
          enum: [excellent, good, pass, fail]
          example: "good"

    # 培训统计模型
    TrainingStats:
      type: object
      properties:
        excellent:
          type: integer
          example: 5
        good:
          type: integer
          example: 8
        pass:
          type: integer
          example: 12
        fail:
          type: integer
          example: 2

    # 错误响应模型
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "错误信息"
        status:
          type: string
          example: "error"

tags:
  - name: 系统状态
    description: 系统健康检查相关接口
  - name: 认证管理
    description: 用户认证和授权相关接口
  - name: 学员管理
    description: 学员信息管理相关接口
  - name: 发展历程
    description: 党员发展历程管理相关接口
  - name: 奖惩记录
    description: 学员奖惩记录管理相关接口
  - name: 培训管理
    description: 培训记录管理相关接口
  - name: 统计分析
    description: 数据统计分析相关接口
